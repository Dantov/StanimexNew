<?php

namespace app\models\admin;

use app\models\tables\Orders;
use app\models\tables\Stock;
use Yii;
use yii\base\Model;

/**
 * ContactForm is the model behind the contact form.
 */
class OrdersModel extends Model
{

    public $myErrors;
    protected $orderData;

    public function getOrders()
    {
        $orders = Orders::find()
            ->orderBy('date DESC')
            ->asArray()
            ->all();

        $res = [
            'mails'=>[],
            'orders'=>[],
        ];
        $posIds = '';
        foreach ( $orders as $order )
        {
            if ( $order['phone'] === "0-0-0" && empty($order['pos_id']) )
            {
                $res['mails'][] = $order;
                continue;
            }

            $res['orders'][] = $order;
            $posIds .= $order['pos_id'] . ',';
        }
        $posIds = rtrim($posIds,',');
        $stock = [];
        if ( $posIds )
            $stock = Stock::find()->select(['short_name_ru','short_name_en','id'])
                ->andWhere('id IN (' . rtrim($posIds,',') . ')')
                ->asArray()
                ->all();

        if ( $stock )
        {
            foreach ( $res['orders'] as &$order )
            {
                foreach ( $stock as $machine )
                {
                    if ( $machine['id'] == $order['pos_id'] )
                        $order['machineName'] = $machine['short_name_ru'];
                }
            }
        }

        return $res;
    }


    /**
     * @param $id
     * @return false|int
     * @throws \yii\db\StaleObjectException
     */
    public function remove($id )
    {
        $webuy = Orders::findOne((int)$id);
        if ( $webuy )
            return $webuy->delete();

        return false;
    }

    public function parseData( array $data ) : array
    {
        $validFields = ['name','company','email','theme','phone','message','pos_id'];

        $result = [];
        foreach ( $data as $fieldName => $text )
        {
            if ( $fieldName === "_csrf" )
                continue;

            if ( !in_array($fieldName, $validFields) )
                continue;

            $result[$fieldName] = $text;
        }

        return $result;
    }

    public function getErrors($attribute = null)
    {
        return parent::getErrors($attribute); // TODO: Change the autogenerated stub
    }


    public function setOrder( array $data )
    {
        $this->orderData = $data = $this->parseData($data);
        $data['date'] = date('Y-m-d');

        $o = new Orders();
        $o->attributes = $data;

        if ($o->save()) return true;

        $this->myErrors = $o->errors;
        return false;
    }

    public function sendEmail( string $machineName = '' )
    {
        $data = $this->orderData;
        $name = $data['name'];
        $email = $data['email'];
        $message = $data['message'];
        $subject  = $data['theme']??'';

        if ( empty($subject) )
        {
            if ( !empty($machineName) )
            {
                $subject =$machineName;
            } else {
                $subject = "From Stanimex site";
            }
        }

        if ( empty($name) || empty($email) || empty($message) || empty($subject) ) return null;

        //$to  = "AlmTade s.r.o. <info@almtradesro.com>";
        $to  = "Stanimex <stan-test@i.ua>";

        $c_message = " 
        <html>
            <body>
                <p>
                   Новое сообщение от: <strong>$name</strong><br>
                </p>
                <p>$message</p>
            </body>
        </html>";

        $headers  = "Content-type: text/html; charset=utf-8 \r\n";
        $headers .= "From: $name <$email>";

        if ( mail($to, $subject, $c_message, $headers) ) return 1;

        return null;
    }


}
